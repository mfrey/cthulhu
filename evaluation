#!/usr/bin/env python2.7

import os
import numpy as np

import matplotlib
matplotlib.use('Agg')

import matplotlib.pyplot as plt

from scalarfileparser import ScalarFileParser

import json

def main():
    results = {}
    #directory = "/home/michael/Desktop/Projekte/SemInt/Castalia-master/Castalia/Simulations/802154_interference/results/"
    directory = "/home/michael/Desktop/Projekte/SemInt/Castalia-master/Castalia/Simulations/802154_interference_par2/results/"

    # get the data
    for result_file in os.listdir(directory):
        if result_file.endswith(".sca"):
            parser = ScalarFileParser(directory + result_file)
            data = parser.read()
            offset = float(data.parameters['offset'])

            if offset not in results:
                results[offset] = {}

            for node in data.nodes.keys():
                if node not in results[offset]:
                    results[offset][node] = []

            sent_packets = float(data.nodes['2']['sent:count'])
            arrived_packets = float(data.nodes['0']['arrival:count'])
            packet_reception_rate = float(arrived_packets/sent_packets)
            results[offset]['0'].append(packet_reception_rate)

            sent_packets = float(data.nodes['3']['sent:count'])
            arrived_packets = float(data.nodes['1']['arrival:count'])
            packet_reception_rate = float(arrived_packets/sent_packets)
            results[offset]['1'].append(packet_reception_rate)

    offsets = sorted(results.keys(), key=float)
    nodes = ['0','1']

    title = "Packet Reception Rate vs. Beacon Offset (Scenario: Special)"
    xlabel = "beacon offset"
    ylabel = "received packets"
    current_filename = "meh.png"
    figure, (axis, axis2) = plt.subplots(1, 2, sharey=True)
    figure.set_size_inches(18.5,10.5)


    with open('data.txt', 'w') as outfile:
         print(json.dumps(results, sort_keys=True, indent=4, separators=(',', ': ')))
         json.dumps(results, outfile)

    # plot the data
    for node in nodes:
        average = []
        minimum = []
        maximum = []

        for offset in offsets:
             average_per_offset = np.average(results[offset][node])
             average.append(average_per_offset)
             minimum_per_offset = np.amin(results[offset][node])
             minimum.append(minimum_per_offset)
             maximum_per_offset = np.amax(results[offset][node])
             maximum.append(maximum_per_offset)

        network_type = ""

        if node == '0':
            #network_type = "csma$_{0}$"
            network_type = "gts$_{0}$"
        else:
            #network_type = "csma$_{1}$"
            network_type = "gts$_{1}$"


        plt.xticks(np.arange(min(offsets), max(offsets)+0.05, 0.05))
        plt.yticks(np.arange(min(minimum), max(maximum)+0.05, 0.05))

        base_line, = axis.plot(offsets, average, lw=2, label=network_type)
        axis.fill_between(offsets, maximum, minimum, color=base_line.get_color(), alpha=0.5)

        base_line, = axis2.plot(offsets, average, lw=2, label=network_type)
        axis2.fill_between(offsets, maximum, minimum, color=base_line.get_color(), alpha=0.5)

        # hrm, if that's going to work
        axis.set_xlim(0,.25) 
        axis2.set_xlim(.75,1.) 

        axis.spines['right'].set_visible(False)
        axis2.spines['left'].set_visible(False)
        axis.yaxis.tick_left()
        axis.tick_params(labeltop='off') 
        axis2.yaxis.tick_right()

    plt.subplots_adjust(wspace=0.15)
    d = .015

    kwargs = dict(transform=axis.transAxes, color='k', clip_on=False)
    axis.plot((1-d,1+d),(-d,+d), **kwargs) # top-left diagonal
    axis.plot((1-d,1+d),(1-d,1+d), **kwargs) # bottom-left diagonal

    kwargs.update(transform=axis2.transAxes) # switch to the bottom axes
    axis2.plot((-d,d),(-d,+d), **kwargs) # top-right diagonal
    axis2.plot((-d,d),(1-d,1+d), **kwargs) # bottom-right diagonal

    #plt.title(title)
    figure.suptitle(title)
    axis.set_xlabel(xlabel)
    axis.set_ylabel(ylabel)
    axis.grid()
    plt.legend(loc=0)
    figure.savefig(current_filename)
    plt.close()
 
if __name__ == "__main__":
    main()
